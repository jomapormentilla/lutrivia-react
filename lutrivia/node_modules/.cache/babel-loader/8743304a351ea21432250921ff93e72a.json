{"ast":null,"code":"var _jsxFileName = \"/Users/jomapormentilla/Flatiron/code/Phase5/lutrivia-react/lutrivia/src/GameContainer.js\";\nimport React from 'react';\nimport data from './data';\nimport QuestionBox from './QuestionBox';\nimport Form from './Form';\n\nclass GameContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questions: [],\n      score: 0,\n      total: 0,\n      name: \"\"\n    };\n\n    this.renderQuestions = () => {\n      let counter = 0;\n      return this.state.questions.map(question => {\n        counter++;\n        return React.createElement(QuestionBox, {\n          key: counter,\n          question: question,\n          handleTrueOrFalse: this.handleTrueOrFalse,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        });\n      });\n    };\n\n    this.handleNewGame = e => {\n      let arr = this.selectFourRandom();\n      this.setState({\n        questions: arr\n      }, () => {\n        console.log(this.state);\n      });\n    };\n\n    this.selectFourRandom = () => {\n      let arr = [];\n\n      for (let i = 0; i < 4; i++) {\n        arr.push(data.questions[i]);\n      }\n\n      return arr;\n    };\n\n    this.handleTrueOrFalse = (e, question) => {\n      e.persist();\n\n      if (e.target.value === question.answer.toString()) {\n        e.target.style.backgroundColor = \"green\";\n        this.setState(prevState => {\n          return {\n            score: prevState.score + 1\n          };\n        }, () => {\n          console.log(this.state);\n        });\n      } else {\n        e.target.style.backgroundColor = \"red\";\n      }\n\n      e.target.style.color = \"#fff\";\n      this.setState(prevState => {\n        return {\n          total: prevState.total + 1\n        };\n      }, () => {\n        this.showForm();\n      });\n    };\n\n    this.showForm = () => {\n      return this.state.total === this.state.questions.length ? React.createElement(Form, {\n        handleInputChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }) : null;\n    };\n\n    this.handleInputChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Lutrivia\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Score: \", this.state.score), React.createElement(\"button\", {\n      onClick: this.handleNewGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"New Game\"), this.renderQuestions(), this.showForm);\n  }\n\n}\n\nexport default GameContainer;","map":{"version":3,"sources":["/Users/jomapormentilla/Flatiron/code/Phase5/lutrivia-react/lutrivia/src/GameContainer.js"],"names":["React","data","QuestionBox","Form","GameContainer","Component","state","questions","score","total","name","renderQuestions","counter","map","question","handleTrueOrFalse","handleNewGame","e","arr","selectFourRandom","setState","console","log","i","push","persist","target","value","answer","toString","style","backgroundColor","prevState","color","showForm","length","handleInputChange","render"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport data from './data'\nimport QuestionBox from './QuestionBox'\nimport Form from './Form'\n\nclass GameContainer extends React.Component {\n    state = {\n        questions: [],\n        score: 0,\n        total: 0,\n        name: \"\"\n    }\n\n    renderQuestions = () => {\n        let counter = 0\n        return this.state.questions.map(question => {\n            counter++\n            return <QuestionBox key={ counter } question={ question } handleTrueOrFalse={ this.handleTrueOrFalse } />\n        })\n    }\n\n    handleNewGame = e => {\n        let arr = this.selectFourRandom()\n        this.setState({\n            questions: arr\n        }, ()=>{console.log(this.state)})\n    }\n\n    selectFourRandom = () => {\n        let arr = []\n        for (let i=0; i<4; i++) {\n            arr.push( data.questions[i] )\n        }\n        return arr\n    }\n\n    handleTrueOrFalse = (e, question) => {\n        e.persist()\n        if (e.target.value === question.answer.toString()) {\n            e.target.style.backgroundColor = \"green\"\n            this.setState(prevState => {return { score: prevState.score+1 }}, ()=>{console.log(this.state)})\n        } else {\n            e.target.style.backgroundColor = \"red\"\n        }\n        e.target.style.color = \"#fff\"\n        this.setState(prevState => {return { total: prevState.total + 1 }}, ()=>{ this.showForm() })\n    }\n\n    showForm = () => {\n        return this.state.total === this.state.questions.length ? <Form handleInputChange={ this.handleInputChange } /> : null\n    }\n\n    handleInputChange = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    render(){\n        return(\n            <div>\n                <h1>Lutrivia</h1>\n                <h3>Score: { this.state.score }</h3>\n                <button onClick={ this.handleNewGame }>New Game</button>\n                { this.renderQuestions() }\n                { this.showForm }\n            </div>\n        )\n    }\n}\n\nexport default GameContainer"]},"metadata":{},"sourceType":"module"}