{"ast":null,"code":"var _jsxFileName = \"/Users/jomapormentilla/Flatiron/code/Phase5/lutrivia-react/lutrivia/src/GameContainer.js\";\nimport React from 'react';\nimport data from './data';\nimport QuestionBox from './QuestionBox';\n\nclass GameContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questions: [],\n      score: 0\n    };\n\n    this.renderQuestions = () => {\n      let counter = 0;\n      return this.state.questions.map(question => {\n        counter++;\n        return React.createElement(QuestionBox, {\n          key: counter,\n          question: question,\n          handleTrueOrFalse: this.handleTrueOrFalse,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16\n          },\n          __self: this\n        });\n      });\n    };\n\n    this.handleNewGame = e => {\n      let arr = this.selectFourRandom();\n      this.setState({\n        questions: arr\n      }, () => {\n        console.log(this.state);\n      });\n    };\n\n    this.selectFourRandom = () => {\n      let arr = [];\n\n      for (let i = 0; i < 4; i++) {\n        arr.push(data.questions[i]);\n      }\n\n      return arr;\n    };\n\n    this.handleTrueOrFalse = (e, question) => {\n      if (e.target.value === question.answer.toString()) {\n        e.target.style.backgroundColor = \"green\";\n        this.setState(prevState => {\n          return {\n            score: prevState.score + 1\n          };\n        }, () => {\n          console.log(this.state);\n        });\n      } else {\n        e.target.style.backgroundColor = \"red\";\n      }\n\n      e.target.style.color = \"#fff\";\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Lutrivia\"), React.createElement(\"button\", {\n      onClick: this.handleNewGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"New Game\"), this.renderQuestions());\n  }\n\n}\n\nexport default GameContainer;","map":{"version":3,"sources":["/Users/jomapormentilla/Flatiron/code/Phase5/lutrivia-react/lutrivia/src/GameContainer.js"],"names":["React","data","QuestionBox","GameContainer","Component","state","questions","score","renderQuestions","counter","map","question","handleTrueOrFalse","handleNewGame","e","arr","selectFourRandom","setState","console","log","i","push","target","value","answer","toString","style","backgroundColor","prevState","color","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,aAAN,SAA4BH,KAAK,CAACI,SAAlC,CAA4C;AAAA;AAAA;AAAA,SACxCC,KADwC,GAChC;AACJC,MAAAA,SAAS,EAAE,EADP;AAEJC,MAAAA,KAAK,EAAE;AAFH,KADgC;;AAAA,SAMxCC,eANwC,GAMtB,MAAM;AACpB,UAAIC,OAAO,GAAG,CAAd;AACA,aAAO,KAAKJ,KAAL,CAAWC,SAAX,CAAqBI,GAArB,CAAyBC,QAAQ,IAAI;AACxCF,QAAAA,OAAO;AACP,eAAO,oBAAC,WAAD;AAAa,UAAA,GAAG,EAAGA,OAAnB;AAA6B,UAAA,QAAQ,EAAGE,QAAxC;AAAmD,UAAA,iBAAiB,EAAG,KAAKC,iBAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,OAHM,CAAP;AAIH,KAZuC;;AAAA,SAcxCC,aAdwC,GAcxBC,CAAC,IAAI;AACjB,UAAIC,GAAG,GAAG,KAAKC,gBAAL,EAAV;AACA,WAAKC,QAAL,CAAc;AACVX,QAAAA,SAAS,EAAES;AADD,OAAd,EAEG,MAAI;AAACG,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKd,KAAjB;AAAwB,OAFhC;AAGH,KAnBuC;;AAAA,SAqBxCW,gBArBwC,GAqBrB,MAAM;AACrB,UAAID,GAAG,GAAG,EAAV;;AACA,WAAK,IAAIK,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACpBL,QAAAA,GAAG,CAACM,IAAJ,CAAUpB,IAAI,CAACK,SAAL,CAAec,CAAf,CAAV;AACH;;AACD,aAAOL,GAAP;AACH,KA3BuC;;AAAA,SA6BxCH,iBA7BwC,GA6BpB,CAACE,CAAD,EAAIH,QAAJ,KAAiB;AACjC,UAAIG,CAAC,CAACQ,MAAF,CAASC,KAAT,KAAmBZ,QAAQ,CAACa,MAAT,CAAgBC,QAAhB,EAAvB,EAAmD;AAC/CX,QAAAA,CAAC,CAACQ,MAAF,CAASI,KAAT,CAAeC,eAAf,GAAiC,OAAjC;AACA,aAAKV,QAAL,CAAcW,SAAS,IAAI;AAAC,iBAAO;AAAErB,YAAAA,KAAK,EAAEqB,SAAS,CAACrB,KAAV,GAAgB;AAAzB,WAAP;AAAoC,SAAhE,EAAkE,MAAI;AAACW,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKd,KAAjB;AAAwB,SAA/F;AACH,OAHD,MAGO;AACHS,QAAAA,CAAC,CAACQ,MAAF,CAASI,KAAT,CAAeC,eAAf,GAAiC,KAAjC;AACH;;AACDb,MAAAA,CAAC,CAACQ,MAAF,CAASI,KAAT,CAAeG,KAAf,GAAuB,MAAvB;AACH,KArCuC;AAAA;;AAuCxCC,EAAAA,MAAM,GAAE;AACJ,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEI;AAAQ,MAAA,OAAO,EAAG,KAAKjB,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,EAGM,KAAKL,eAAL,EAHN,CADJ;AAOH;;AA/CuC;;AAkD5C,eAAeL,aAAf","sourcesContent":["import React from 'react'\n\nimport data from './data'\nimport QuestionBox from './QuestionBox'\n\nclass GameContainer extends React.Component {\n    state = {\n        questions: [],\n        score: 0\n    }\n\n    renderQuestions = () => {\n        let counter = 0\n        return this.state.questions.map(question => {\n            counter++\n            return <QuestionBox key={ counter } question={ question } handleTrueOrFalse={ this.handleTrueOrFalse } />\n        })\n    }\n\n    handleNewGame = e => {\n        let arr = this.selectFourRandom()\n        this.setState({\n            questions: arr\n        }, ()=>{console.log(this.state)})\n    }\n\n    selectFourRandom = () => {\n        let arr = []\n        for (let i=0; i<4; i++) {\n            arr.push( data.questions[i] )\n        }\n        return arr\n    }\n\n    handleTrueOrFalse = (e, question) => {\n        if (e.target.value === question.answer.toString()) {\n            e.target.style.backgroundColor = \"green\"\n            this.setState(prevState => {return { score: prevState.score+1 }}, ()=>{console.log(this.state)})\n        } else {\n            e.target.style.backgroundColor = \"red\"\n        }\n        e.target.style.color = \"#fff\"\n    }\n\n    render(){\n        return(\n            <div>\n                <h1>Lutrivia</h1>\n                <button onClick={ this.handleNewGame }>New Game</button>\n                { this.renderQuestions() }\n            </div>\n        )\n    }\n}\n\nexport default GameContainer"]},"metadata":{},"sourceType":"module"}